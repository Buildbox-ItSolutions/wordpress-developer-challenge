{
  "name": "yargs-parser",
  "version": "5.0.1",
  "description": "the mighty option parser used by yargs",
  "main": "index.js",
  "scripts": {
    "pretest": "standard",
    "test": "nyc mocha test/*.js",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "release": "standard-version"
  },
  "repository": {
    "url": "git+ssh://git@github.com/yargs/yargs-parser.git"
  },
  "keywords": [
    "argument",
    "parser",
    "yargs",
    "command",
    "cli",
    "parsing",
    "option",
    "args",
    "argument"
  ],
  "author": {
    "name": "Ben Coe",
    "email": "ben@npmjs.com"
  },
  "license": "ISC",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.12",
    "mocha": "^3.0.1",
    "nyc": "^10.0.0",
    "standard": "^8.0.0",
    "standard-version": "^4.0.0"
  },
  "dependencies": {
    "camelcase": "^3.0.0",
    "object.assign": "^4.1.0"
  },
  "readme": "# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.png)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/yargs-parser/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://github.com/yargs/yargs-parser/blob/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('./')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error), e.g. `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.number`: keys should be treated as numbers.\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "gitHead": "eab6c039888bd5d51f33dda7a98808564acfa938",
  "bugs": {
    "url": "https://github.com/yargs/yargs-parser/issues"
  },
  "homepage": "https://github.com/yargs/yargs-parser#readme",
  "_id": "yargs-parser@5.0.1",
  "_nodeVersion": "12.21.0",
  "_npmVersion": "6.14.11",
  "dist": {
    "integrity": "sha512-wpav5XYiddjXxirPoCTUPbqM0PXvJ9hiBMvuJgInvo4/lAOTZzUprArw17q2O1P2+GHhbBr18/iQwjL5Z9BqfA==",
    "shasum": "7ede329c1d8cdbbe209bd25cdb990e9b1ebbb394",
    "tarball": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-5.0.1.tgz",
    "fileCount": 6,
    "unpackedSize": 38524,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSRweCRA9TVsSAnZWagAAcrQP/1LUhjZe1jgnRg4vIc10\nLh3GOAXj4Vrsg7KIEjmGn8C8HbFcqYtxDnULdgnFYH+YPycZ0jDrF/dnTHr9\nQC83DMyc65C3i26PDdXDMGykn/JDv0w7wPmhaWoqrKgTvV0naUKKRbNmd9Ge\nyGlbHNyTCJLklgpnRDREJvryzbFzuYovSPzCa00+DhebAkTC3il92L788JCl\ngb8rHphjMrlC27Awo0n0wZoNVUyAxI3f2K8HoeYbRJi3xIfVuYYOeGzUX3ku\ne+S2AepIM2rv2bBNxYqDw9SElEAVmpwOQbVXk+E1pa0PYcRQE+JuuSLmfPas\nRH07DAk4mEWeelm6aoVxHbhCGzRaSZPYhUaGDW1hBAVr58UCM4yEOIX/CL3i\nFZ08ccrqoq95EN/i5JAqMgWRsgwgNrk5x3KiXzLwGlvZc+yS8J65l6lqu8Ek\ng0pISjl2yv+0QCQgEKCfJ63S2dHEiueOZ6KiWARFE3nZO1pTzjlr/KWGThcu\nkgKSuVn335ODhWBxHmiFFqWc46QkR+S96Sf3csB1vfZMVlt1IVxk3kjeZh7k\n4Yui0ujb3EzHVDAl49R1D94tGWsj7FxNB97rBtyXWFBYaNAcxElyPz9/BmPr\nRURQIasatkBpVfbd6+rNmvWnfWyufAfLpN/w4ayD4pe2tn+P56eh+K7cicy2\nncMe\r\n=//t3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "_npmUser": {
    "name": "oss-bot",
    "email": "bencoe+oss-bot@gmail.com"
  },
  "directories": {},
  "maintainers": [
    {
      "name": "bcoe",
      "email": "bencoe@gmail.com"
    },
    {
      "name": "nexdrew",
      "email": "andrewbgoode@gmail.com"
    },
    {
      "name": "oss-bot",
      "email": "bencoe+oss-bot@gmail.com"
    }
  ],
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/yargs-parser_5.0.1_1615404062188_0.6496584798507412"
  },
  "_hasShrinkwrap": false,
  "_shasum": "7ede329c1d8cdbbe209bd25cdb990e9b1ebbb394",
  "_resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-5.0.1.tgz",
  "_from": "yargs-parser@>=5.0.1 <6.0.0"
}
