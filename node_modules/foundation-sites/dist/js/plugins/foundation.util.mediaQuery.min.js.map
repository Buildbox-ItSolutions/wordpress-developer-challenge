{"version":3,"sources":["webpack://__FOUNDATION_EXTERNAL__.[name]/webpack/universalModuleDefinition","webpack:/__FOUNDATION_EXTERNAL__.[name]/external {\"root\":[\"__FOUNDATION_EXTERNAL__\",\"foundation.core\"],\"amd\":\"./foundation.core\",\"commonjs\":\"./foundation.core\",\"commonjs2\":\"./foundation.core\"}","webpack://__FOUNDATION_EXTERNAL__.[name]/js/entries/plugins/foundation.util.mediaQuery.js","webpack://__FOUNDATION_EXTERNAL__.[name]/js/foundation.util.mediaQuery.js","webpack://__FOUNDATION_EXTERNAL__.[name]/webpack/bootstrap"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__foundation_core__","__WEBPACK_EXTERNAL_MODULE_jquery__","__webpack_require__","r","__webpack_exports__","_foundation_core__WEBPACK_IMPORTED_MODULE_0__","d","_foundation_util_mediaQuery__WEBPACK_IMPORTED_MODULE_1__","Foundation","MediaQuery","_init","document","styleMedia","matchMedia","media","script","getElementsByTagName","head","style","type","parentNode","insertBefore","info","getComputedStyle","currentStyle","styleSheet","matchMedium","textContent","text","matches","queries","current","this","namedQueries","extractedStyles","appendTo","key","css","self","str","styleObject","split","reduce","ret","param","parts","push","decodeURIComponent","val","hasOwnProperty","name","concat","_getCurrentSize","_watcher","isInitialized","atLeast","size","query","only","upTo","nextSize","next","is","trim","filter","p","length","bpModifier","_parts$","bpSize","Error","get","i","value","queryIndex","findIndex","q","_this","_getQueryName","nextQuery","_typeof","TypeError","matched","currentSize","jquery__WEBPACK_IMPORTED_MODULE_0___default","on","newSize","_this2","installedModules","m","modules","c","getter","o","Object","defineProperty","enumerable","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","n","object","property","prototype","call","s","moduleId","l"],"mappings":"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","file":"foundation.util.mediaQuery.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"./foundation.core\"), require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"./foundation.core\", \"jquery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"foundation.util.mediaQuery\"] = factory(require(\"./foundation.core\"), require(\"jquery\"));\n\telse\n\t\troot[\"__FOUNDATION_EXTERNAL__\"] = root[\"__FOUNDATION_EXTERNAL__\"] || {}, root[\"__FOUNDATION_EXTERNAL__\"][\"foundation.util.mediaQuery\"] = factory(root[\"__FOUNDATION_EXTERNAL__\"][\"foundation.core\"], root[\"jQuery\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__foundation_core__, __WEBPACK_EXTERNAL_MODULE_jquery__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__foundation_core__;","import { Foundation } from './foundation.core';\nimport { MediaQuery } from '../../foundation.util.mediaQuery';\n\nFoundation.MediaQuery = MediaQuery;\nFoundation.MediaQuery._init();\n\nexport { Foundation, MediaQuery };\n","import $ from 'jquery';\n\n// Default set of media queries\nconst defaultQueries = {\n  'default' : 'only screen',\n  landscape : 'only screen and (orientation: landscape)',\n  portrait : 'only screen and (orientation: portrait)',\n  retina : 'only screen and (-webkit-min-device-pixel-ratio: 2),' +\n    'only screen and (min--moz-device-pixel-ratio: 2),' +\n    'only screen and (-o-min-device-pixel-ratio: 2/1),' +\n    'only screen and (min-device-pixel-ratio: 2),' +\n    'only screen and (min-resolution: 192dpi),' +\n    'only screen and (min-resolution: 2dppx)'\n  };\n\n\n// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright Â© 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. MIT license\n/* eslint-disable */\nwindow.matchMedia || (window.matchMedia = (function () {\n  \"use strict\";\n\n  // For browsers that support matchMedium api such as IE 9 and webkit\n  var styleMedia = (window.styleMedia || window.media);\n\n  // For those that don't support matchMedium\n  if (!styleMedia) {\n    var style   = document.createElement('style'),\n    script      = document.getElementsByTagName('script')[0],\n    info        = null;\n\n    style.type  = 'text/css';\n    style.id    = 'matchmediajs-test';\n\n    if (!script) {\n      document.head.appendChild(style);\n    } else {\n      script.parentNode.insertBefore(style, script);\n    }\n\n    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n    info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n    styleMedia = {\n      matchMedium: function (media) {\n        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n        if (style.styleSheet) {\n          style.styleSheet.cssText = text;\n        } else {\n          style.textContent = text;\n        }\n\n        // Test if media query is true or false\n        return info.width === '1px';\n      }\n    };\n  }\n\n  return function(media) {\n    return {\n      matches: styleMedia.matchMedium(media || 'all'),\n      media: media || 'all'\n    };\n  };\n})());\n/* eslint-enable */\n\nvar MediaQuery = {\n  queries: [],\n\n  current: '',\n\n  /**\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n   * @function\n   * @private\n   */\n  _init() {\n\n    // make sure the initialization is only done once when calling _init() several times\n    if (this.isInitialized === true) {\n      return;\n    } else {\n      this.isInitialized = true;\n    }\n\n    var self = this;\n    var $meta = $('meta.foundation-mq');\n    if(!$meta.length){\n      $('<meta class=\"foundation-mq\" name=\"foundation-mq\" content>').appendTo(document.head);\n    }\n\n    var extractedStyles = $('.foundation-mq').css('font-family');\n    var namedQueries;\n\n    namedQueries = parseStyleToObject(extractedStyles);\n\n    self.queries = []; // reset\n\n    for (var key in namedQueries) {\n      if(namedQueries.hasOwnProperty(key)) {\n        self.queries.push({\n          name: key,\n          value: `only screen and (min-width: ${namedQueries[key]})`\n        });\n      }\n    }\n\n    this.current = this._getCurrentSize();\n\n    this._watcher();\n  },\n\n  /**\n   * Reinitializes the media query helper.\n   * Useful if your CSS breakpoint configuration has just been loaded or has changed since the initialization.\n   * @function\n   * @private\n   */\n  _reInit() {\n    this.isInitialized = false;\n    this._init();\n  },\n\n  /**\n   * Checks if the screen is at least as wide as a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n   */\n  atLeast(size) {\n    var query = this.get(size);\n\n    if (query) {\n      return window.matchMedia(query).matches;\n    }\n\n    return false;\n  },\n\n  /**\n   * Checks if the screen is within the given breakpoint.\n   * If smaller than the breakpoint of larger than its upper limit it returns false.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` otherwise.\n   */\n  only(size) {\n    return size === this._getCurrentSize();\n  },\n\n  /**\n   * Checks if the screen is within a breakpoint or smaller.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's larger.\n   */\n  upTo(size) {\n    const nextSize = this.next(size);\n\n    // If the next breakpoint does not match, the screen is smaller than\n    // the upper limit of this breakpoint.\n    if (nextSize) {\n      return !this.atLeast(nextSize);\n    }\n\n    // If there is no next breakpoint, the \"size\" breakpoint does not have\n    // an upper limit and the screen will always be within it or smaller.\n    return true;\n  },\n\n  /**\n   * Checks if the screen matches to a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n   */\n  is(size) {\n    const parts = size.trim().split(' ').filter(p => !!p.length);\n    const [bpSize, bpModifier = ''] = parts;\n\n    // Only the breakpont\n    if (bpModifier === 'only') {\n      return this.only(bpSize);\n    }\n    // At least the breakpoint (included)\n    if (!bpModifier || bpModifier === 'up') {\n      return this.atLeast(bpSize);\n    }\n    // Up to the breakpoint (included)\n    if (bpModifier === 'down') {\n      return this.upTo(bpSize);\n    }\n\n    throw new Error(`\n      Invalid breakpoint passed to MediaQuery.is().\n      Expected a breakpoint name formatted like \"<size> <modifier>\", got \"${size}\".\n    `);\n  },\n\n  /**\n   * Gets the media query of a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to get.\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n   */\n  get(size) {\n    for (var i in this.queries) {\n      if(this.queries.hasOwnProperty(i)) {\n        var query = this.queries[i];\n        if (size === query.name) return query.value;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Get the breakpoint following the given breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint.\n   * @returns {String|null} - The name of the following breakpoint, or `null` if the passed breakpoint was the last one.\n   */\n  next(size) {\n    const queryIndex = this.queries.findIndex((q) => this._getQueryName(q) === size);\n    if (queryIndex === -1) {\n      throw new Error(`\n        Unknown breakpoint \"${size}\" passed to MediaQuery.next().\n        Ensure it is present in your Sass \"$breakpoints\" setting.\n      `);\n    }\n\n    const nextQuery = this.queries[queryIndex + 1];\n    return nextQuery ? nextQuery.name : null;\n  },\n\n  /**\n   * Returns the name of the breakpoint related to the given value.\n   * @function\n   * @private\n   * @param {String|Object} value - Breakpoint name or query object.\n   * @returns {String} Name of the breakpoint.\n   */\n  _getQueryName(value) {\n    if (typeof value === 'string')\n      return value;\n    if (typeof value === 'object')\n      return value.name;\n    throw new TypeError(`\n      Invalid value passed to MediaQuery._getQueryName().\n      Expected a breakpoint name (String) or a breakpoint query (Object), got \"${value}\" (${typeof value})\n    `);\n  },\n\n  /**\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n   * @function\n   * @private\n   * @returns {String} Name of the current breakpoint.\n   */\n  _getCurrentSize() {\n    var matched;\n\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n\n      if (window.matchMedia(query.value).matches) {\n        matched = query;\n      }\n    }\n\n    return matched && this._getQueryName(matched);\n  },\n\n  /**\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n   * @function\n   * @private\n   */\n  _watcher() {\n    $(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', () => {\n      var newSize = this._getCurrentSize(), currentSize = this.current;\n\n      if (newSize !== currentSize) {\n        // Change the current media query\n        this.current = newSize;\n\n        // Broadcast the media query change on the window\n        $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n      }\n    });\n  }\n};\n\n\n\n// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str) {\n  var styleObject = {};\n\n  if (typeof str !== 'string') {\n    return styleObject;\n  }\n\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n  if (!str) {\n    return styleObject;\n  }\n\n  styleObject = str.split('&').reduce(function(ret, param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = parts[0];\n    var val = parts[1];\n    key = decodeURIComponent(key);\n\n    // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    val = typeof val === 'undefined' ? null : decodeURIComponent(val);\n\n    if (!ret.hasOwnProperty(key)) {\n      ret[key] = val;\n    } else if (Array.isArray(ret[key])) {\n      ret[key].push(val);\n    } else {\n      ret[key] = [ret[key], val];\n    }\n    return ret;\n  }, {});\n\n  return styleObject;\n}\n\nexport {MediaQuery};\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n"]}